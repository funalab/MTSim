AddVector	math_func.c	/^void AddVector(double vector1[3], double vector2[3/
ERR	my_getopt.h	/^#define ERR(_s, _c) { if (opterr) fprintf (stderr,/
Equations	mnewt.c	/^\/\/ Newton-Raphson Method for Nonlinear Systems o/
FV_function	solve_1D_double.c	/^double FV_function(double ff, double vg, double ko/
FV_solution	fv_solution.c	/^void FV_solution(double xx, double *f_v, double *f/
InnProdVector	math_func.c	/^double InnProdVector(double vector1[3], double vec/
Length	math_func.c	/^double Length(double a[3]) {$/
MakeRotationMatrix	math_func.c	/^void MakeRotationMatrix(double RotationMatrix[3][3/
Mmain	main.c	/^int main(int argc, char* argv[]) {$/
OutProdVector	math_func.c	/^void OutProdVector(double vector1[3], double vecto/
Poisson	math_func.c	/^double Poisson(double np, int motornumber) {$/
ProductJacVec	math_func.c	/^void ProductJacVec(double aa_out[3], double bb_jac/
QuadEqu2	math_func.c	/^void QuadEqu2(double a[3], double b[2]) {$/
Stokes_function	solve_1D_double.c	/^double Stokes_function(double ff, double gr, doubl/
SubVector	math_func.c	/^void SubVector(double vector1[3], double vector2[3/
TRACE	mtsim.h	/^#define TRACE(x) do { if (DEBUG_PRINT_FLAG) dbg_pr/
UnitVector	math_func.c	/^void UnitVector(double vector1[3], double vector2[/
VectorRotation	math_func.c	/^void VectorRotation(double out[3], double in[3], d/
color_setting	color_setting.c	/^void color_setting(mtGraphics *mtg, int p) {$/
convert_matrix	nrutil.c	/^float **convert_matrix(float *a, long nrl, long nr/
cvector	nrutil.c	/^unsigned char *cvector(long nl, long nh)$/
dbg_printf	dbg_printf.c	/^void dbg_printf(const char *fmt, ...)$/
display_setting	display_setting.c	/^void display_setting(mtGraphics *mtg) {$/
dmatrix	nrutil.c	/^double **dmatrix(long nrl, long nrh, long ncl, lon/
draw_graphs	draw_graphs.c	/^void draw_graphs(int i, mtGraphics *mtg, mtGlobal /
dvector	nrutil.c	/^double *dvector(long nl, long nh)$/
f3tensor	nrutil.c	/^float ***f3tensor(long nrl, long nrh, long ncl, lo/
free_convert_matrix	nrutil.c	/^void free_convert_matrix(float **b, long nrl, long/
free_cvector	nrutil.c	/^void free_cvector(unsigned char *v, long nl, long /
free_dmatrix	nrutil.c	/^void free_dmatrix(double **m, long nrl, long nrh, /
free_dvector	nrutil.c	/^void free_dvector(double *v, long nl, long nh)$/
free_f3tensor	nrutil.c	/^void free_f3tensor(float ***t, long nrl, long nrh,/
free_imatrix	nrutil.c	/^void free_imatrix(int **m, long nrl, long nrh, lon/
free_ivector	nrutil.c	/^void free_ivector(int *v, long nl, long nh)$/
free_lvector	nrutil.c	/^void free_lvector(unsigned long *v, long nl, long /
free_matrix	nrutil.c	/^void free_matrix(float **m, long nrl, long nrh, lo/
free_return	free.c	/^void free_return(double *fvec, double **fjac, int /
free_submatrix	nrutil.c	/^void free_submatrix(float **b, long nrl, long nrh,/
free_vector	nrutil.c	/^void free_vector(float *v, long nl, long nh)$/
function_FV3D	callback.c	/^void function_FV3D(double *x, int n, double *fvec,/
function_MotorFV	callback.c	/^void function_MotorFV(double *x, int n, double *fv/
function_anaMotorFV	callback.c	/^void function_anaMotorFV (double *x, int n, double/
function_laserMotorFV	callback.c	/^void function_laserMotorFV (double *x, int n, doub/
getopt	my_getopt.h	/^int getopt(int argc, char **argv, char *opts)$/
imatrix	nrutil.c	/^int **imatrix(long nrl, long nrh, long ncl, long n/
ivector	nrutil.c	/^int *ivector(long nl, long nh)$/
lubksb	lubksb_double.c	/^void lubksb(double **a, int n, int *indx, double b/
ludcmp	ludcmp_double.c	/^void ludcmp(double **a, int n, int *indx, double */
lvector	nrutil.c	/^unsigned long *lvector(long nl, long nh)$/
matrix	nrutil.c	/^float **matrix(long nrl, long nrh, long ncl, long /
mtGlobal	mtglobal.h	/^} mtGlobal;$/
mtGraphics	mtgraphics.h	/^} mtGraphics;$/
nrerror	nrutil.c	/^void nrerror(char error_text[])$/
ran1	ran1_double.c	/^double ran1(long *idum)$/
rtsafe	solve_1D_double.c	/^double rtsafe(void (*funcd)(double, double*, doubl/
rtsafe_mod	solve_1D_double.c	/^double rtsafe_mod(void (*funcd)(double, double *, /
save_logs	save_logs.c	/^void save_logs(int i, int p, int N, FILE* f_out1, /
store_graphs	store_graphs.c	/^void store_graphs(void) {$/
submatrix	nrutil.c	/^float **submatrix(float **a, long oldrl, long oldr/
usage	usage.c	/^void usage(char* myname) {$/
vector	nrutil.c	/^float *vector(long nl, long nh)$/
