!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AM	ran1_double.c	/^#define AM /;"	d	file:
AddVector	math_func.c	/^void AddVector(double vector1[3], double vector2[3], double result[3]) {$/;"	f
BLUE	mtsim.h	/^#define BLUE /;"	d
BOLD	mtsim.h	/^#define BOLD /;"	d
BucklingConst	mtglobal.h	/^  double BucklingConst;$/;"	m	struct:_mtGlobal
Buckling_backward_sum	mtglobal.h	/^  double Buckling_backward_sum;$/;"	m	struct:_mtGlobal
Buckling_forward_sum	mtglobal.h	/^  double Buckling_forward_sum;$/;"	m	struct:_mtGlobal
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -O0 -g -I\/usr\/X11R6\/include$/;"	m
CYAN	mtsim.h	/^#define CYAN /;"	d
Cir_Rad	mtsim.h	/^#define Cir_Rad /;"	d
DEBUG_PRINT_FLAG	mtsim.h	/^#define DEBUG_PRINT_FLAG /;"	d
DEFAULT	mtsim.h	/^#define DEFAULT /;"	d
DVecNucCen	mtglobal.h	/^  double **DVecNucCen;$/;"	m	struct:_mtGlobal
EPS	ran1_double.c	/^#define EPS /;"	d	file:
ERR	my_getopt.h	/^#define ERR(/;"	d
FONT_DEFAULT	mtsim.h	/^#define FONT_DEFAULT /;"	d
FREE_ARG	nrutil.c	/^#define FREE_ARG /;"	d	file:
FV_function	solve_1D_double.c	/^double FV_function(double ff, double vg, double ko, double fd)$/;"	f
FV_solution	fv_solution.c	/^void FV_solution(double xx, double *f_v, double *fp_v, mtGlobal* g) {$/;"	f
F_dependency	mtglobal.h	/^  double F_dependency;$/;"	m	struct:_mtGlobal
Fbackward	mtglobal.h	/^  double Fbackward[6];$/;"	m	struct:_mtGlobal
Fbuckle	mtglobal.h	/^  double Fbuckle[3];$/;"	m	struct:_mtGlobal
GREEN	mtsim.h	/^#define GREEN /;"	d
HEADERS	Makefile	/^HEADERS = $(wildcard *.h)$/;"	m
IA	ran1_double.c	/^#define IA /;"	d	file:
IM	ran1_double.c	/^#define IM /;"	d	file:
IQ	ran1_double.c	/^#define IQ /;"	d	file:
IR	ran1_double.c	/^#define IR /;"	d	file:
InnProdVector	math_func.c	/^double InnProdVector(double vector1[3], double vector2[3]) {$/;"	f
L	mtglobal.h	/^  double *L;$/;"	m	struct:_mtGlobal
LDFLAGS	Makefile	/^LDFLAGS = -L\/usr\/X11R6\/lib -lX11 -lm$/;"	m
Length	math_func.c	/^double Length(double a[3]) {$/;"	f
MAGENTA	mtsim.h	/^#define MAGENTA /;"	d
MAXIT	solve_1D_double.c	/^#define MAXIT /;"	d	file:
MakeRotationMatrix	math_func.c	/^void MakeRotationMatrix(double RotationMatrix[3][3], double RotationVector[3], double dt) {$/;"	f
MotorDensity	mtglobal.h	/^  double MotorDensity;$/;"	m	struct:_mtGlobal
MotorMaxVel	mtglobal.h	/^  double MotorMaxVel;$/;"	m	struct:_mtGlobal
MotorStallF	mtglobal.h	/^  double MotorStallF;$/;"	m	struct:_mtGlobal
N	mtglobal.h	/^  int N; \/* the (maximum) number of MTs per two centrosomes *\/$/;"	m	struct:_mtGlobal
NDIV	ran1_double.c	/^#define NDIV /;"	d	file:
NN	mtglobal.h	/^  int NN;$/;"	m	struct:_mtGlobal
NR_END	nrutil.c	/^#define NR_END /;"	d	file:
NTAB	ran1_double.c	/^#define NTAB /;"	d	file:
NumberOfMotor	mtglobal.h	/^  double *NumberOfMotor;$/;"	m	struct:_mtGlobal
OBJS	Makefile	/^OBJS = $(patsubst %.c, %.o, $(wildcard *.c))$/;"	m
OutProdVector	math_func.c	/^void OutProdVector(double vector1[3], double vector2[3], double result[3]) {$/;"	f
PI	math_func.c	/^#define PI /;"	d	file:
PI	mtsim.h	/^#define PI /;"	d
PI	solve_1D_double.c	/^#define PI /;"	d	file:
PROG	Makefile	/^PROG = mtsim$/;"	m
Poisson	math_func.c	/^double Poisson(double np, int motornumber) {$/;"	f
ProductJacVec	math_func.c	/^void ProductJacVec(double aa_out[3], double bb_jac[3][3], double cc_in[3]) {$/;"	f
QuadEqu2	math_func.c	/^void QuadEqu2(double a[3], double b[2]) {$/;"	f
RED	mtsim.h	/^#define RED /;"	d
RNMX	ran1_double.c	/^#define RNMX /;"	d	file:
SC3	mtsim.h	/^#define SC3 /;"	d
SRCS	Makefile	/^SRCS = $(wildcard *.c)$/;"	m
ST	mtsim.h	/^#define ST /;"	d
Scale1	mtgraphics.h	/^  int Scale1;$/;"	m	struct:_mtGraphics
Stokes_function	solve_1D_double.c	/^double Stokes_function(double ff, double gr, double fb)$/;"	f
Stokes_rad	mtglobal.h	/^  double Stokes_rad;$/;"	m	struct:_mtGlobal
Stokes_rotation	mtglobal.h	/^  double Stokes_rotation;$/;"	m	struct:_mtGlobal
Stokes_translation	mtglobal.h	/^  double Stokes_translation;$/;"	m	struct:_mtGlobal
SubVector	math_func.c	/^void SubVector(double vector1[3], double vector2[3], double result[3]) {$/;"	f
TINY	ludcmp_double.c	/^#define TINY /;"	d	file:
TRACE	mtsim.h	/^#define TRACE(/;"	d
UNDER_LINE	mtsim.h	/^#define UNDER_LINE /;"	d
UNITTIME	mtsim.h	/^#define UNITTIME /;"	d
UnitVector	math_func.c	/^void UnitVector(double vector1[3], double vector2[3]) {$/;"	f
VectorRotation	math_func.c	/^void VectorRotation(double out[3], double in[3], double rotAx[3], double rotStd[3], double degree) {$/;"	f
Vg	mtglobal.h	/^  double Vg;$/;"	m	struct:_mtGlobal
Visco	mtglobal.h	/^  double Visco;$/;"	m	struct:_mtGlobal
WIN_HEIGHT	mtsim.h	/^#define WIN_HEIGHT /;"	d
WIN_WIDTH	mtsim.h	/^#define WIN_WIDTH /;"	d
YELLOW	mtsim.h	/^#define YELLOW /;"	d
_NR_UTILS_H_	nrutil.h	/^#define _NR_UTILS_H_$/;"	d
__mtglobal__	mtglobal.h	/^#define __mtglobal__$/;"	d
__mtgraphics__	mtgraphics.h	/^#define __mtgraphics__$/;"	d
__mtsim__	mtsim.h	/^#define __mtsim__$/;"	d
_mtGlobal	mtglobal.h	/^typedef struct _mtGlobal {$/;"	s
_mtGraphics	mtgraphics.h	/^typedef struct _mtGraphics {$/;"	s
anaST	mtsim.h	/^#define anaST /;"	d
att	mtgraphics.h	/^  XSetWindowAttributes att;$/;"	m	struct:_mtGraphics
boolean	mtsim.h	/^#define boolean /;"	d
boolean	mtsim.h	/^#undef boolean$/;"	d
c1	mtgraphics.h	/^  XColor c1,c2,c3,c4,c5,cc;$/;"	m	struct:_mtGraphics
c2	mtgraphics.h	/^  XColor c1,c2,c3,c4,c5,cc;$/;"	m	struct:_mtGraphics
c3	mtgraphics.h	/^  XColor c1,c2,c3,c4,c5,cc;$/;"	m	struct:_mtGraphics
c4	mtgraphics.h	/^  XColor c1,c2,c3,c4,c5,cc;$/;"	m	struct:_mtGraphics
c5	mtgraphics.h	/^  XColor c1,c2,c3,c4,c5,cc;$/;"	m	struct:_mtGraphics
cc	mtgraphics.h	/^  XColor c1,c2,c3,c4,c5,cc;$/;"	m	struct:_mtGraphics
cm	mtgraphics.h	/^  Colormap cm;$/;"	m	struct:_mtGraphics
color_setting	color_setting.c	/^void color_setting(mtGraphics *mtg, int p) {$/;"	f
convert_matrix	nrutil.c	/^float **convert_matrix(a,nrl,nrh,ncl,nch)$/;"	f
convert_matrix	nrutil.c	/^float **convert_matrix(float *a, long nrl, long nrh, long ncl, long nch)$/;"	f
cvector	nrutil.c	/^unsigned char *cvector(long nl, long nh)$/;"	f
cvector	nrutil.c	/^unsigned char *cvector(nl,nh)$/;"	f
d	mtgraphics.h	/^  Display *d;$/;"	m	struct:_mtGraphics
dT	mtsim.h	/^#define dT /;"	d
dbg_printf	dbg_printf.c	/^void dbg_printf(const char *fmt, ...)$/;"	f
debug	Makefile	/^debug := false$/;"	m
display_setting	display_setting.c	/^void display_setting(mtGraphics *mtg) {$/;"	f
dmatrix	nrutil.c	/^double **dmatrix(long nrl, long nrh, long ncl, long nch)$/;"	f
dmatrix	nrutil.c	/^double **dmatrix(nrl,nrh,ncl,nch)$/;"	f
draw_graphs	draw_graphs.c	/^void draw_graphs(int i, mtGraphics *mtg, mtGlobal *g, double PVecCen[2][3], double MT[][3], double Nuc[3], double Rad, double RadS, double MetaSpindle_L) {$/;"	f
dvector	nrutil.c	/^double *dvector(long nl, long nh)$/;"	f
dvector	nrutil.c	/^double *dvector(nl,nh)$/;"	f
f3tensor	nrutil.c	/^float ***f3tensor(long nrl, long nrh, long ncl, long nch, long ndl, long ndh)$/;"	f
f3tensor	nrutil.c	/^float ***f3tensor(nrl, nrh, ncl, nch, ndl, ndh)$/;"	f
false	mtsim.h	/^#define false /;"	d
fjac_pull	mtglobal.h	/^  double fjac_pull[6][6];$/;"	m	struct:_mtGlobal
free_convert_matrix	nrutil.c	/^void free_convert_matrix(b, nrl, nrh, ncl, nch)$/;"	f
free_convert_matrix	nrutil.c	/^void free_convert_matrix(float **b, long nrl, long nrh, long ncl, long nch)$/;"	f
free_cvector	nrutil.c	/^void free_cvector(unsigned char *v, long nl, long nh)$/;"	f
free_cvector	nrutil.c	/^void free_cvector(v,nl,nh)$/;"	f
free_dmatrix	nrutil.c	/^void free_dmatrix(double **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_dmatrix	nrutil.c	/^void free_dmatrix(m, nrl, nrh, ncl, nch)$/;"	f
free_dvector	nrutil.c	/^void free_dvector(double *v, long nl, long nh)$/;"	f
free_dvector	nrutil.c	/^void free_dvector(v,nl,nh)$/;"	f
free_f3tensor	nrutil.c	/^void free_f3tensor(float ***t, long nrl, long nrh, long ncl, long nch, long ndl, long ndh)$/;"	f
free_f3tensor	nrutil.c	/^void free_f3tensor(t,nrl, nrh, ncl, nch, ndl, ndh)$/;"	f
free_imatrix	nrutil.c	/^void free_imatrix(int **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_imatrix	nrutil.c	/^void free_imatrix(m, nrl, nrh, ncl, nch)$/;"	f
free_ivector	nrutil.c	/^void free_ivector(int *v, long nl, long nh)$/;"	f
free_ivector	nrutil.c	/^void free_ivector(v,nl,nh)$/;"	f
free_lvector	nrutil.c	/^void free_lvector(unsigned long *v, long nl, long nh)$/;"	f
free_lvector	nrutil.c	/^void free_lvector(v,nl,nh)$/;"	f
free_matrix	nrutil.c	/^void free_matrix(float **m, long nrl, long nrh, long ncl, long nch)$/;"	f
free_matrix	nrutil.c	/^void free_matrix(m, nrl, nrh, ncl, nch)$/;"	f
free_return	free.c	/^void free_return(double *fvec, double **fjac, int n, double *p, int *indx) {$/;"	f
free_submatrix	nrutil.c	/^void free_submatrix(b, nrl, nrh, ncl, nch)$/;"	f
free_submatrix	nrutil.c	/^void free_submatrix(float **b, long nrl, long nrh, long ncl, long nch)$/;"	f
free_vector	nrutil.c	/^void free_vector(float *v, long nl, long nh)$/;"	f
free_vector	nrutil.c	/^void free_vector(v,nl,nh)$/;"	f
function_FV3D	callback.c	/^void function_FV3D(double *x, int n, double *fvec, double **fjac, mtGlobal* g) {$/;"	f
function_MotorFV	callback.c	/^void function_MotorFV(double *x, int n, double *fvec, double **fjac, mtGlobal* g) {$/;"	f
function_anaMotorFV	callback.c	/^void function_anaMotorFV (double *x, int n, double *fvec, double **fjac, mtGlobal* g) {$/;"	f
function_laserMotorFV	callback.c	/^void function_laserMotorFV (double *x, int n, double *fvec, double **fjac, mtGlobal* g) {$/;"	f
gc1	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc2	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc3	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc4	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc5	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc6	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc7	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc8	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc9	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
gc_clr	mtgraphics.h	/^  GC gc1, gc2, gc3, gc4, gc5, gc6, gc7, gc8, gc9, gc_clr;$/;"	m	struct:_mtGraphics
getopt	my_getopt.h	/^int getopt(int argc, char **argv, char *opts)$/;"	f
imatrix	nrutil.c	/^int **imatrix(long nrl, long nrh, long ncl, long nch)$/;"	f
imatrix	nrutil.c	/^int **imatrix(nrl,nrh,ncl,nch)$/;"	f
ivector	nrutil.c	/^int *ivector(long nl, long nh)$/;"	f
ivector	nrutil.c	/^int *ivector(nl,nh)$/;"	f
k_on	mtglobal.h	/^  double k_on;$/;"	m	struct:_mtGlobal
laserST	mtsim.h	/^#define laserST /;"	d
lubksb	lubksb_double.c	/^void lubksb(double **a, int n, int *indx, double b[])$/;"	f
ludcmp	ludcmp_double.c	/^void ludcmp(double **a, int n, int *indx, double *d)$/;"	f
lvector	nrutil.c	/^unsigned long *lvector(long nl, long nh)$/;"	f
lvector	nrutil.c	/^unsigned long *lvector(nl,nh)$/;"	f
main	main.c	/^int main(int argc, char* argv[]) {$/;"	f
matrix	nrutil.c	/^float **matrix(long nrl, long nrh, long ncl, long nch)$/;"	f
matrix	nrutil.c	/^float **matrix(nrl,nrh,ncl,nch)$/;"	f
metaST	mtsim.h	/^#define metaST /;"	d
mnewt	mnewt.c	/^boolean mnewt(int ntrial, double x[], int n, double tolx, double tolf,$/;"	f
mtGlobal	mtglobal.h	/^} mtGlobal;$/;"	t	typeref:struct:_mtGlobal
mtGraphics	mtgraphics.h	/^} mtGraphics;$/;"	t	typeref:struct:_mtGraphics
mt_end	mtglobal.h	/^  int mt_end;$/;"	m	struct:_mtGlobal
mt_start	mtglobal.h	/^  int mt_start;$/;"	m	struct:_mtGlobal
nrerror	nrutil.c	/^void nrerror(char error_text[])$/;"	f
nrerror	nrutil.c	/^void nrerror(error_text)$/;"	f
optarg	my_getopt.h	/^char	*optarg;$/;"	v
opterr	my_getopt.h	/^int	opterr = 1;$/;"	v
optind	my_getopt.h	/^int	optind = 1;$/;"	v
optopt	my_getopt.h	/^int	optopt;$/;"	v
phase	mtglobal.h	/^  unsigned char *phase;$/;"	m	struct:_mtGlobal
phase_transition_count	mtglobal.h	/^  unsigned int phase_transition_count;$/;"	m	struct:_mtGlobal
pixmap	mtgraphics.h	/^  Pixmap pixmap;$/;"	m	struct:_mtGraphics
pulling_phase	mtglobal.h	/^  unsigned char *pulling_phase;$/;"	m	struct:_mtGlobal
pushing_phase	mtglobal.h	/^  unsigned char *pushing_phase;$/;"	m	struct:_mtGlobal
ran1	ran1_double.c	/^double ran1(long *idum)$/;"	f
rtsafe	solve_1D_double.c	/^double rtsafe(void (*funcd)(double, double*, double*, mtGlobal*), double x1, double x2, double xacc, mtGlobal* g)$/;"	f
rtsafe_mod	solve_1D_double.c	/^double rtsafe_mod(void (*funcd)(double, double *, double *, mtGlobal*), double x1, double x2, double xacc, mtGlobal* g)$/;"	f
save_logs	save_logs.c	/^void save_logs(int i, int p, int N, FILE* f_out1, FILE* f_out2, FILE* f_out3, FILE* f_out4, FILE* f_out5, FILE* f_out6, FILE* data_for_3D, double PVecCen[2][3], double MT[][3]) {$/;"	f
store_graphs	store_graphs.c	/^void store_graphs(void) {$/;"	f
submatrix	nrutil.c	/^float **submatrix(a,oldrl,oldrh,oldcl,oldch,newrl,newcl)$/;"	f
submatrix	nrutil.c	/^float **submatrix(float **a, long oldrl, long oldrh, long oldcl, long oldch, long newrl, long newcl)$/;"	f
true	mtsim.h	/^#define true /;"	d
u	mtglobal.h	/^  double **u;$/;"	m	struct:_mtGlobal
usage	usage.c	/^void usage(char* myname) {$/;"	f
vector	nrutil.c	/^float *vector(long nl, long nh)$/;"	f
vector	nrutil.c	/^float *vector(nl,nh)$/;"	f
w1	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
w2	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
w3	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
w4	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
w5	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
w6	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
w7	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
w8	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
w9	mtgraphics.h	/^  Window w1,w2,w3,w4,w5,w6,w7,w8,w9;$/;"	m	struct:_mtGraphics
